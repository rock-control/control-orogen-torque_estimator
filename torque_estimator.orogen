name "torque_estimator"
version "0.1"

import_types_from "base"
import_types_from "hbridge"

using_library "hbridge"
using_library "hysteresis_model"
using_library "asguard"

import_types_from "TorqueEstimatorTypes.hpp"

task_context "Task" do
    input_port("status", "base/actuators/Status").
        doc("Status of all hbridges. A data connection type is recommended").
        needs_buffered_connection

    output_port("torque_estimated", "torque_estimator/WheelTorques").
        doc("Estimated torque values")

    property("A", "double").
        doc('Bouc-Wen-Baber-Noori Model parameter - A')

    property("beta", "double").
        doc('Bouc-Wen-Baber-Noori Model parameter - beta')

    property("gamma", "double").
        doc('Bouc-Wen-Baber-Noori Model parameter - gamma')

    property("n", "double").
        doc('Bouc-Wen-Baber-Noori Model parameter - n')

    property("a", "double").
        doc('Bouc-Wen-Baber-Noori Model parameter - a')

    property("ki", "double").
        doc('Bouc-Wen-Baber-Noori Model parameter - ki')

    property("nu", "double").
        doc('Bouc-Wen-Baber-Noori Model parameter - nu')

    property("eta", "double").
        doc('Bouc-Wen-Baber-Noori Model parameter - eta')

    property("h", "double").
        doc('Bouc-Wen-Baber-Noori Model parameter - h')

    property("velSmoothFactor", "double").
        doc('The velocity smooth factor for a first order smooth')
end
=begin
using_task_library "hbridge"
using_task_library "can"
deployment "test_torque_estimator" do
    can     = task('can', "can::Task").
        realtime.
        highest_priority.
	periodic(0.001)
    hbridge = task("hbridge", "hbridge::Task").
    	realtime.
	highest_priority.
        triggered
    torque_estimator = task("torque_estimator", "torque_estimator::Task").
        realtime.
        periodic(0.001)

    add_default_logger
end
=end  
